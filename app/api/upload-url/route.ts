import { NextResponse } from "next/server";
import { cacheHeaders } from "@/lib/http";

// Mock implementation - in production, this would generate presigned URLs for S3/R2
export async function POST(request: Request) {
  try {
    const { fileName, contentType } = await request.json();
    
    if (!fileName || !contentType) {
      return NextResponse.json(
        { error: "fileName and contentType are required" },
        { status: 400 }
      );
    }

    // Validate file type
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif'];
    if (!allowedTypes.includes(contentType)) {
      return NextResponse.json(
        { error: "Invalid file type. Only images are allowed." },
        { status: 400 }
      );
    }

    // Generate unique file name
    const timestamp = Date.now();
    const randomId = Math.random().toString(36).substr(2, 9);
    const fileExtension = fileName.split('.').pop();
    const uniqueFileName = `products/${timestamp}-${randomId}.${fileExtension}`;

    // Mock presigned URL - in production, this would be generated by your cloud provider
    const uploadUrl = `https://mock-upload-service.com/upload/${uniqueFileName}`;
    const publicUrl = `https://images.floristmarket.ro/${uniqueFileName}`;

    return NextResponse.json({
      uploadUrl,
      publicUrl,
      fileName: uniqueFileName
    }, { 
      headers: { ...cacheHeaders } 
    });

  } catch (error) {
    console.error('Upload URL generation error:', error);
    return NextResponse.json(
      { error: "Failed to generate upload URL" },
      { status: 500 }
    );
  }
}

export async function GET(request: Request) {
  const url = new URL(request.url);
  const fileName = url.searchParams.get("fileName");
  const contentType = url.searchParams.get("contentType");
  
  if (!fileName || !contentType) {
    return NextResponse.json(
      { error: "fileName and contentType are required" },
      { status: 400 }
    );
  }

  // Validate file type
  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif'];
  if (!allowedTypes.includes(contentType)) {
    return NextResponse.json(
      { error: "Invalid file type. Only images are allowed." },
      { status: 400 }
    );
  }

  // Generate unique file name
  const timestamp = Date.now();
  const randomId = Math.random().toString(36).substr(2, 9);
  const fileExtension = fileName.split('.').pop();
  const uniqueFileName = `products/${timestamp}-${randomId}.${fileExtension}`;

  // Mock presigned URL - in production, this would be generated by your cloud provider
  const uploadUrl = `https://mock-upload-service.com/upload/${uniqueFileName}`;
  const publicUrl = `https://images.pots.ro/${uniqueFileName}`;

  return NextResponse.json({
    uploadUrl,
    publicUrl,
    fileName: uniqueFileName
  }, { 
    headers: { ...cacheHeaders } 
  });
}
